{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,mB;;;;;;;;;;;ACAA,mJAAmJ,SAAS,4O;;;;;;;;;;;;;;;;;;;;;;;;;ACA1G;AACA;AAMjD,CAAC;AAQF;IAOI,gCAAgC;IAChC,yDAAyD;IAGzD,sBACU,UAAqB;QAArB,eAAU,GAAV,UAAU,CAAW;QAV/B,UAAK,GAAG,yBAAyB,CAAC;QAEzB,cAAS,GAAmB,EAAE,CAAC;IASrC,CAAC;IAGJ,+BAAQ,GAAR;QAEA;;;;;;YAMI;QACF,yDAAyD;QACzD,6CAA6C;QAE7C,0GAA0G;QAC1G,sCAAsC;IACxC,CAAC;IAED,iCAAU,GAAV;QACE,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;QAC1C,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;aACxB,SAAS,EAAE,CAAC;IACjB,CAAC;IAED,kCAAW,GAAX;QACE,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;QAC1C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC;aAClC,SAAS,EAAE,CAAC;IACjB,CAAC;IA1CQ,YAAY;QANxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAcuB,+DAAU;OAZtB,YAAY,CA4CxB;IAAD,mBAAC;CAAA;AA5CwB;;;;;;;;;;;;;;;;;;;;;;;;;ACfiC;AACjB;AACqC;AAE/B;AAiB/C;IAAA;IAAyB,CAAC;IAAb,SAAS;QAfrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,qEAAgB;gBAChB,yEAAoB,CAAC,WAAW,CAAC;oBAC/B,UAAU,EAAE,YAAY;oBACxB,UAAU,EAAE,cAAc;iBAC3B,CAAC;aACH;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;ACrBtB;AAAA;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;ACdnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align:center\\\">\\n  <h1>\\n    Welcome to {{ title }}!\\n  </h1>\\n</div>\\n\\n<div>\\n  <p>Send a get request:</p>\\n  <button (click)=\\\"GetRequest()\\\">Get Request</button>\\n</div>\\n\\n<div>\\n  <p>Send a post request:</p>\\n  <button (click)=\\\"PostRequest()\\\">Post Request</button>\\n</div>\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\n//import { Observable } from \"rxjs/Observable\";\n\n// Create the data structure\nexport interface GreetingInterface {\n  message: string;\n};\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent implements OnInit {\n\n    title = 'Express CSurf Prototype';\n    \n    private  Greetings:  Array<object> = [];\n    \n    \n    // Create a new empty observable\n    //GreetingsObservable : Observable<GreetingsInterface[]>;\n    \n    \n    constructor(\n      private httpClient:HttpClient\n    ) {}\n\n    \n    ngOnInit() {    \n    \n    /*\n      this.httpClient.get(\"https://app.example.com:3000/api\")\n        .subscribe((data:  Array<object>) => {\n          this.Greetings  =  data;\n          console.log(data);\n      });\n      */\n      //this.httpClient.get(\"https://app.example.com:3000/api\")\n      //  .subscribe(res => this.Greetings = res );\n    \n      //this.GreetingsObservable = this.httpClient.get<GreetingsInterface[]>(\"https://app.example.com:3000/api\")\n      //  .map(response => response.message)\n    }\n        \n    GetRequest(){\n      console.log(\"sending GET resquest done \");\n      this.httpClient.get(\"/api\")\n        .subscribe();\n    }\n    \n    PostRequest(){\n      console.log(\"sending POST resquest done\");\n      this.httpClient.post(\"/api\", \"Hello\")\n        .subscribe();\n    }\n    \n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HttpClientXsrfModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    HttpClientXsrfModule.withOptions({\n      cookieName: 'XSRF-TOKEN',\n      headerName: 'X-XSRF-TOKEN'\n    })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}